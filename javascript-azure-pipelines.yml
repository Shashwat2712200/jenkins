trigger:
- master
variables:
- template: values.yaml
pool:
  vmImage: ubuntu-latest
steps:
- task: NodeTool@0
  inputs:
    versionSpec: '16.x'
  displayName: 'Install Node.js'
- script: |
        python3 -m pip install -U pip
        python3 -m pip install -r requirements.txt
  displayName: Install Intoto
  enabled: ${{ variables.intototask }}

- script: |
        cp -r functionary/* owner
        cd owner
        python3 create_layout.py
        cd ..
  displayName: Create root file for intoto
  enabled: ${{ variables.intototask }}
- task: SonarQubePrepare@5
  inputs:
    SonarQube: ${{ variables.sonar_connection }}
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: 'javascript'
    cliProjectName: 'javascript'
    cliSources: '.'
  enabled: ${{ variables.sonartask }}
- ${{ if eq(variables.build_intoto, 'false') }}:
  - script: |
      npm install
    displayName: 'npm install and build'
- ${{ else }}:
  - script: |
        npm install
        in-toto-run --key functionary/${{ variables.build_key }} --materials . --products . --step-name build -- npm build
    displayName: Compile
- task: SonarQubeAnalyze@5
  enabled: ${{ variables.sonartask }}
- task: SonarQubePublish@5
  inputs:
    pollingTimeoutSec: '300'
  enabled: ${{ variables.sonartask }}
- task: PowerShell@2
  displayName: Sonar Approval Gate
  inputs:
    filePath: '$(System.DefaultWorkingDirectory)/sonar.ps1'
    arguments: '-SonarServerName ${{ variables.SonarServerName }} -SonarProjectKey javascript -SonarToken ${{ variables.SonarToken }} '
  enabled: ${{ variables.sonartask }}
- ${{ if eq(variables.test_intoto, 'false') }}:
  - task: CmdLine@2
    displayName: 'npm test'
    inputs:
      script: 'npm test'
- ${{ else }}:
  - script: in-toto-run --key functionary/${{ variables.test_key }} --materials . --products . --step-name test -- npm test
    displayName: Test
  
- task: SnykSecurityScan@1
  displayName: Snyk Dependency Scan
  inputs:
    serviceConnectionEndpoint: '${{ variables.snyk_service_connection }}'
    testType: 'app'
    severityThreshold: '${{variables.snyk_severity}}'
    monitorWhen: 'always'
    failOnIssues: true
    additionalArguments: '--all-projects'
  enabled: ${{ variables.snykdependencytask }}

- task: Docker@2
  displayName: Docker Image Build
  inputs:
        containerRegistry: ${{ variables.docker_build_conn }}
        repository: ${{ variables.docker_repo }}
        command: 'build'
        Dockerfile: '**/Dockerfile'
        tags: '$(Build.BuildId)'
        addPipelineData: false
        addBaseImageData: false
- task: CmdLine@2
  displayName: Grype Image Scanning
  inputs:
    script: |
      curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
      
      grype ${{ variables.aqua_trivy_image }} --fail-on ${{ variables.grype_severity }} --only-fixed -o table
  enabled: ${{ variables.grypetask }}
# - ${{ if eq(variables.trivy_intoto, 'false') }}:
#   - task: Bash@3
#     displayName: Trivy Quality Gate
#     inputs:
#           targetType: 'inline'
#           script: |
#             sudo apt-get install wget apt-transport-https gnupg lsb-release
#             wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
#             echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
#             sudo apt-get update
#             sudo apt-get install trivy
#             trivy image --exit-code 1 --severity ${{ variables.aqua_severity }} --ignore-unfixed --scanners vuln ${{ variables.aqua_trivy_image }}
#     enabled: ${{ variables.aquatrivytask }}
# - ${{ else }}:
#   - script: |
#           sudo apt-get install wget apt-transport-https gnupg lsb-release
#           wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
#           echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
#           sudo apt-get update
#           sudo apt-get install trivy
#           export IN_TOTO_LINK_CMD_EXEC_TIMEOUT=''50''
#           in-toto-run --key functionary/${{ variables.trivy_key }} --materials . --products . --step-name trivy -- trivy image --exit-code 1 --severity ${{ variables.aqua_severity }} --ignore-unfixed ${{ variables.aqua_trivy_image }}
#           trivy image --exit-code 1 --severity ${{ variables.aqua_severity }} --ignore-unfixed ${{ variables.aqua_trivy_image }}
#     enabled: ${{ variables.aquatrivytask }}
#     displayName: Trivy Quality Gate
    
- task: SnykSecurityScan@1
  displayName: Snyk Docker Scan
  inputs:
        serviceConnectionEndpoint: '${{ variables.snyk_service_connection }}'
        testType: 'container'
        dockerImageName: '${{ variables.aqua_trivy_image }}'
        severityThreshold: '${{variables.snyk_docker_severity}}'
        monitorWhen: 'always'
        failOnIssues: true
  enabled: ${{ variables.snykdockertask }}
        
- ${{ if eq(variables.docker_intoto, 'false') }}:
  - task: Docker@2
    displayName: Docker Image Push
    inputs:
          containerRegistry: '${{ variables.docker_build_conn }}'
          repository: '${{ variables.docker_repo }}'
          command: 'push'
          tags: '$(Build.BuildId)'
          addPipelineData: false
          addBaseImageData: false
- ${{ else }}:
  - task: Docker@2
    inputs:
      containerRegistry: '${{ variables.docker_build_conn }}'
      command: 'login'
    displayName: docker login
  - script: |
          export IN_TOTO_LINK_CMD_EXEC_TIMEOUT=''30''
          in-toto-run --key functionary/${{ variables.docker_key }} --materials . --products . --step-name docker -- docker push ${{variables.aqua_trivy_image}}
          ls
    displayName: docker image push
- task: CmdLine@2
  displayName: Image Name Update on Helm
  inputs:
        script: |
          sed "s|appimages|${{ variables.aqua_trivy_image }}|g" $(System.DefaultWorkingDirectory)/${{ variables.helm_name_dev }} > $(System.DefaultWorkingDirectory)/deployment-tmp.yaml
          rm $(System.DefaultWorkingDirectory)/${{ variables.helm_name_dev }}
          mv $(System.DefaultWorkingDirectory)/deployment-tmp.yaml $(System.DefaultWorkingDirectory)/${{ variables.helm_name_dev }}
- task: CmdLine@2
  displayName: Image Name Update on Helm
  inputs:
        script: |
          sed "s|appimages|${{ variables.aqua_trivy_image }}|g" $(System.DefaultWorkingDirectory)/${{ variables.helm_name_qa }} > $(System.DefaultWorkingDirectory)/deployment-tmp.yaml
          rm $(System.DefaultWorkingDirectory)/${{ variables.helm_name_qa }}
          mv $(System.DefaultWorkingDirectory)/deployment-tmp.yaml $(System.DefaultWorkingDirectory)/${{ variables.helm_name_qa }}
- task: CmdLine@2
  displayName: Image Name Update on Helm
  inputs:
        script: |
          sed "s|appimages|${{ variables.aqua_trivy_image }}|g" $(System.DefaultWorkingDirectory)/${{ variables.helm_name_prod }} > $(System.DefaultWorkingDirectory)/deployment-tmp.yaml
          rm $(System.DefaultWorkingDirectory)/${{ variables.helm_name_prod }}
          mv $(System.DefaultWorkingDirectory)/deployment-tmp.yaml $(System.DefaultWorkingDirectory)/${{ variables.helm_name_prod }}

- ${{ if eq(variables.checkov_intoto, 'false') }}:
  - task: CmdLine@2
    displayName: Checkov Scan
    inputs:
      script: |
        pip install pip --upgrade
        pip install pyopenssl --upgrade
        pip3 install checkov
  
        checkov -f ${{ variables.helm_name_dev }} -c ${{ variables.checkov_policies }}
        checkov -f ${{ variables.helm_name_qa }} -c ${{ variables.checkov_policies }}
        checkov -f ${{ variables.helm_name_prod }} -c ${{ variables.checkov_policies }}
    enabled: ${{ variables.checkovtask }}
- ${{ else }}:
  - script: |
      pip install pip --upgrade
      pip install pyopenssl --upgrade
      pip3 install checkov
  
      export IN_TOTO_LINK_CMD_EXEC_TIMEOUT=''30''
      in-toto-run --key functionary/${{ variables.checkov_key }} --materials . --products . --step-name checkov -- checkov -f ${{ variables.helm_name_dev }} -f ${{ variables.helm_name_qa }} -f ${{ variables.helm_name_prod }} -c ${{ variables.checkov_policies }}
      checkov -f ${{ variables.helm_name_dev }} -f ${{ variables.helm_name_qa }} -f ${{ variables.helm_name_prod }} -c ${{ variables.checkov_policies }}
    enabled: ${{ variables.checkovtask }}
    displayName: Checkov Scan
- script: |
        ls
        cp *.link owner
  displayName: copy link files for verification
  enabled: ${{ variables.intototask }}
- task: CreateWorkItem@1
  displayName: WorkItem Create On Task Fail
  inputs:
    teamProject: '$(System.TeamProject)'
    workItemType: 'Bug'
    title: 'Build failed in $(Build.BuildNumber)'
    #assignedTo: $(Build.RequestedForId)
    assignedTo: '${{ variables.bug_person_name }} ${{ variables.bug_person_email }}'
    areaPath: '$(System.TeamProject)'
    iterationPath: '$(System.TeamProject)'
    associate: true
    linkWorkItems: true
    linkType: 'Microsoft.VSTS.Common.Affects-Reverse'
    linkTarget: 'associate'
    addAttachments: true
    attachments: '**/*.log'
    createOutputs: true
    outputVariables: |
      WorkItemUrl = CWI.WorkItemUrl
      Description = Description
  condition: failed()
- task: CopyFiles@2
  inputs:
    Contents: ${{ variables.helm_name_dev }}
    TargetFolder: '$(build.artifactstagingdirectory)'
- task: CopyFiles@2
  inputs:
    Contents: ${{ variables.helm_name_qa }}
    TargetFolder: '$(build.artifactstagingdirectory)'
- task: CopyFiles@2
  inputs:
    Contents: ${{ variables.helm_name_prod }}
    TargetFolder: '$(build.artifactstagingdirectory)'
- task: CopyFiles@2
  inputs:
    SourceFolder: 'owner'
    Contents: '*'
    TargetFolder: '$(build.artifactstagingdirectory)'
  enabled: ${{ variables.intototask }}
- task: CopyFiles@2
  inputs:
    Contents: requirements.txt
    TargetFolder: '$(build.artifactstagingdirectory)'
  enabled: ${{ variables.intototask }}
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

- bash: |
         cd /home/vsts/work/_tasks/EmailReport_36fd41b1-8024-4ce9-a5a0-53c3e54ed105/1.1.8
         cp ./index.js ./Index.js
         sed -i -e "s~\\\\\\\\~/~" ./htmlreport/HTMLReportCreator.js
         sed -i -e "s~\\\\\\\\~/~" ./model/helpers/LinkHelper.js
  displayName: 'Bash Script to fix Email Report'
  condition: succeededOrFailed()
  enabled: ${{ variables.emailtask }}

- task: EmailReport@1
  inputs:
    sendMailConditionConfig: 'Always'
    subject: 'JAVASCRIPT pipeline status for Build $(Build.BuildNumber)'
    toAddress: '${{ variables.Toaddress }}'
    defaultDomain: 'microsoft.com'
    groupTestResultsBy: 'run'
    includeCommits: true
    maxTestFailuresToShow: '15'
    includeOthersInTotal: false
    usePreviousEnvironment: false
    smtpConnectionEndpoint: 'email_service_endpoint'
  condition: succeededOrFailed()
  enabled: ${{ variables.emailtask }}